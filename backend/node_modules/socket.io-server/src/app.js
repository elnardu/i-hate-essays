const socketIO = require('socket.io'),
      extend   = require('extend'),
      log      = require('./log'),
      Client  = require('./components/client'),
      EventEmitter = require('events');

module.exports = class App
{

    constructor(config)
    {
        this.events  = new EventEmitter();
        this.socket  = null;
        this.clients = [];
        
        this.opts = extend({
            port: 8304,
            commands: [
            
            ]
        }, config);
    }
    
    run()
    {
        log('server', 'starting...');
        
        this.socket = socketIO(this.opts.port);
        this.socket.on('connection', this.createClient.bind(this));
        
        log('server', 'listening on *:%d', this.opts.port);
    }
    
    createClient(socket)
    {
        let client = new Client(this, socket);
        
        this.clients.push(client);
        
        this.events.emit('client.connect', client);
        
        socket.on('disconnect', () => {
            this.events.emit('client.disconnect', client);
            this.clients.splice(this.clients.indexOf(client), 1);
            
            log('server', 'client disconnected');
            this.logStatistics();
        });
        
        log('server', 'client connected');
        this.logStatistics();
    }
    
    logStatistics()
    {
        log('server', '%d clients connected', this.clients.length);
    }
    
    on(name, callback)
    {
        return this.events.on(name, callback);
    }

};